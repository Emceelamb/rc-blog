{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/day04","result":{"data":{"markdownRemark":{"id":"b7fd6709-8daf-575c-b2a2-88f42e580b37","html":"<p>Today, watched The ‘What’ and ‘Why’ of functional programming. Its a pretty entertaining overview of functional programming. Junichero Swanson has a humorous and dry approach to describing functional programming and what makes it distinct from imperative (procedural) programming. </p>\n<p>He has a profound observation of the philosophical differences of the two paradigms which he compares to pre-Socratic schools of philosophy in regards to the mutability of data. In his words, imperative programming is in-line with Heraclitus, who wrote about fire. Fire is equivalent to change, in that everything is in a state of constant change. This is similar to imperative programming where variables can mutate and change. An example being in this for loop a is always changing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let x = 1;\nwhile(x &lt; 3){\n  x = x + 1\n}\n\nreturn x</code></pre></div>\n<p>In contrast, pre-Socratic philosopher Anaximander said that everything is in balance and constant. It is extratemporal, or happening outside of time.  This idea equates to immutability in functional programming. </p>","fields":{"slug":"/posts/day04","tagSlugs":["/tag/functional-programming/","/tag/haskell/"]},"frontmatter":{"date":"2020-08-14","description":"Today I learned more about Haskell and Functional Programming Paradigm.","tags":["Functional Programming","Haskell"],"title":"Day 4","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/day04"}},"staticQueryHashes":["251939775","3942705351","401334301"]}